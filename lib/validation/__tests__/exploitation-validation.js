import test from 'ava'
import {modaliteSchema} from '../exploitation-validation.js'
import {frequences} from '../../nomenclature.js'
import {validatePayload, ValidationError} from '../../util/payload.js'

function validate(modalite) {
  // On utilise le même helper que le code principal
  return validatePayload(modalite, modaliteSchema)
}

test('modaliteSchema / valide - toutes fréquences nulles', t => {
  const input = {
    freq_volume_preleve: null,
    freq_debit_preleve: null,
    freq_debit_reserve: null,
    freq_conductivite: null,
    freq_temperature: null,
    freq_niveau_eau: null,
    freq_ph: null,
    freq_chlorures: null,
    freq_nitrates: null,
    freq_sulfates: null,
    freq_turbidite: null,
    remarque: null
  }

  const value = validate(input)
  t.deepEqual(value, input)
})

test('modaliteSchema / valide - quelques fréquences définies', t => {
  const input = {
    freq_volume_preleve: frequences[5], // Jour
    freq_debit_preleve: frequences[7], // Mois
    freq_debit_reserve: null,
    freq_conductivite: frequences[4], // Heure
    freq_temperature: null,
    freq_niveau_eau: null,
    freq_ph: null,
    freq_chlorures: null,
    freq_nitrates: null,
    freq_sulfates: null,
    freq_turbidite: null,
    remarque: 'Observations ponctuelles'
  }

  const value = validate(input)
  t.deepEqual(value, input)
})

test('modaliteSchema / invalide - fréquence inconnue', t => {
  const input = {freq_volume_preleve: 'frequence bidon'}
  const error = t.throws(() => validate(input), {instanceOf: ValidationError})
  t.true(error.details.some(d => d.message === 'Cette fréquence est invalide.'))
})

test('modaliteSchema / invalide - remarque nombre', t => {
  const input = {remarque: 123}
  const error = t.throws(() => validate(input), {instanceOf: ValidationError})
  t.true(error.details.some(d => d.message === 'La remarque doit être une chaine de caractères.'))
})

test('modaliteSchema / invalide - remarque vide', t => {
  const input = {remarque: ''}
  const error = t.throws(() => validate(input), {instanceOf: ValidationError})
  t.true(error.details.some(d => d.message === 'La remarque ne peut pas être vide.'))
})

test('modaliteSchema / invalide - type incorrect sur fréquence (number)', t => {
  const input = {freq_volume_preleve: 123}
  const error = t.throws(() => validate(input), {instanceOf: ValidationError})
  // Joi va retourner un message générique sur le type attendu (custom ne s’exécute pas si type mauvais)
  t.true(error.details.some(d => d.message.includes('must be')) || error.details.length > 0)
})
