import Joi from 'joi'
import {validatePayload} from '../util/payload.js'
import {contraintes, frequences, natures, parametres, statutsExploitation, unites, usages} from '../nomenclature.js'

function validateDate(date, helpers) {
  if (!date || typeof date !== 'string' || !/^\d{4}-\d{2}-\d{2}$/.test(date)) {
    return helpers.message('La date est invalide.')
  }

  const parsedDate = new Date(date)

  if (parsedDate.toString() === 'Invalid Date') {
    return helpers.message('La date est invalide.')
  }

  return date
}

function validateParametre(parametre, helpers) {
  if (!Object.values(parametres).includes(parametre)) {
    return helpers.message('Le paramètre est invalide.')
  }

  return parametre
}

function validateUnite(unite, helpers) {
  if (!Object.values(unites).includes(unite)) {
    return helpers.message('L’unité est invalide.')
  }

  return unite
}

function validateContrainte(contrainte, helpers) {
  if (!Object.values(contraintes).includes(contrainte)) {
    return helpers.message('La contrainte est invalide.')
  }

  return contrainte
}

function validateFrequence(frequence, helpers) {
  if (!Object.values(frequences).includes(frequence)) {
    return helpers.message('Cette fréquence est invalide.')
  }

  return frequence
}

function validateNature(nature, helpers) {
  if (!Object.values(natures).includes(nature)) {
    return helpers.message('Cette nature est invalide.')
  }

  return nature
}

function validateStatut(statut, helpers) {
  if (!Object.values(statutsExploitation).includes(statut)) {
    return helpers.message('Ce statut est invalide.')
  }

  return statut
}

function validateUsage(usage, helpers) {
  if (!Object.values(usages).includes(usage)) {
    return helpers.message('Cet usage est invalide.')
  }

  return usage
}

function addStringMessages(field, fieldName) {
  return field.messages({
    'string.base': `Le champ "${fieldName}" doit être une chaine de caractères.`,
    'string.empty': `Le champ "${fieldName}" ne peut pas être vide.`,
    'string.min': `Le champ "${fieldName}" doit comporter au moins {#limit} caractères.`,
    'string.max': `Le champ "${fieldName}" ne doit pas comporter plus de {#limit} caractères.`
  })
}

export const documentSchema = Joi.object().keys({
  nom_fichier: addStringMessages(Joi.string().trim().min(3).max(200).required(), 'nom_fichier'),
  reference: addStringMessages(Joi.string().trim().min(3).max(200).allow(null), 'reference'),
  nature: Joi.custom(validateNature).allow(null),
  date_signature: Joi.custom(validateDate).required().messages({
    'any.required': 'La date de signature est obligatoire.'
  }),
  date_fin_validite: Joi.custom(validateDate).allow(null),
  date_ajout: Joi.custom(validateDate).required().messages({
    'any.required': 'La date d’ajout est obligatoire.'
  }),
  remarque: addStringMessages(Joi.string().trim().min(3).max(500).allow(null), 'remarque')
})

export const regleSchema = Joi.object().keys({
  parametre: Joi.custom(validateParametre).required().messages({
    'any.required': 'Le paramètre est obligatoire'
  }),
  unite: Joi.custom(validateUnite).required().messages({
    'any.required': 'L’unité est obligatoire.'
  }),
  valeur: Joi.number().required().messages({
    'any.required': 'La valeur est obligatoire.',
    'number.base': 'La valeur doit être un nombre.'
  }),
  contrainte: Joi.custom(validateContrainte),
  debut_validite: Joi.custom(validateDate).required().messages({
    'any.required': 'La date de début de validité est obligatoire.'
  }),
  fin_validite: Joi.custom(validateDate).allow(null),
  debut_periode: Joi.custom(validateDate).allow(null),
  fin_periode: Joi.custom(validateDate).allow(null),
  remarque: addStringMessages(Joi.string().trim().min(3).max(500).allow(null), 'remarque'),
  id_regle: Joi.string().trim().allow(null),
  id_document: Joi.string().trim().max(200).messages({
    'string.base': 'L’id du document doit être une chaine de caractères.'
  })
})

export const modaliteSchema = Joi.object().keys({
  freq_volume_preleve: Joi.custom(validateFrequence).allow(null),
  freq_debit_preleve: Joi.custom(validateFrequence).allow(null),
  freq_debit_reserve: Joi.custom(validateFrequence).allow(null),
  freq_conductivite: Joi.custom(validateFrequence).allow(null),
  freq_temperature: Joi.custom(validateFrequence).allow(null),
  freq_niveau_eau: Joi.custom(validateFrequence).allow(null),
  freq_ph: Joi.custom(validateFrequence).allow(null),
  freq_chlorures: Joi.custom(validateFrequence).allow(null),
  freq_nitrates: Joi.custom(validateFrequence).allow(null),
  freq_sulfates: Joi.custom(validateFrequence).allow(null),
  freq_turbidite: Joi.custom(validateFrequence).allow(null),
  remarque: Joi.string().allow(null).messages({
    'string.base': 'La remarque doit être une chaine de caractères.',
    'string.empty': 'La remarque ne peut pas être vide.'
  })
})

const EXPLOITATION_FIELDS = {
  date_debut: Joi.custom(validateDate),
  date_fin: Joi.custom(validateDate),
  statut: Joi.custom(validateStatut),
  raison_abandon: Joi.string().trim().min(3).max(500),
  remarque: Joi.string().trim().min(3).max(500),
  point: Joi.string().length(24).hex(),
  preleveur: Joi.string().length(24).hex(),
  usages: Joi.array().min(1).items(Joi.string().custom(validateUsage)),
  regles: Joi.array().items(regleSchema),
  documents: Joi.array().items(documentSchema),
  modalites: Joi.array().items(modaliteSchema)
}

export const exploitationSchemaCreation = Joi.object().keys({
  date_debut: EXPLOITATION_FIELDS.date_debut.required().messages({
    'any.required': 'Une date de début est obligatoire.'
  }),
  date_fin: EXPLOITATION_FIELDS.date_fin.allow(null),
  statut: EXPLOITATION_FIELDS.statut.required().messages({
    'any.required': 'Le statut est obligatoire.'
  }),
  raison_abandon: addStringMessages(EXPLOITATION_FIELDS.raison_abandon.allow(null), 'raison_abandon'),
  remarque: addStringMessages(EXPLOITATION_FIELDS.remarque.allow(null), 'remarque'),
  point: EXPLOITATION_FIELDS.point.required().messages({
    'any.required': 'L’id du point est obligatoire.'
  }),
  preleveur: EXPLOITATION_FIELDS.preleveur.required().messages({
    'any.required': 'L’id du préleveur est obligatoire.'
  }),
  usages: EXPLOITATION_FIELDS.usages.required().messages({
    'array.base': 'Les usages doivent être dans un tableau',
    'string.base': 'Les usages doivent être des chaines de caractères.',
    'any.required': 'Au moins un usage est obligatoire.',
    'array.min': 'Au moins un usage est obligatoire.'
  }),
  regles: EXPLOITATION_FIELDS.regles.required().messages({
    'array.base': 'Les règles doivent être dans un tableau.',
    'any.required': 'Le tableau règles sont obligatoires.'
  }),
  documents: EXPLOITATION_FIELDS.documents.required().messages({
    'array.base': 'Les documents doivent être dans un tableau.',
    'any.required': 'Le tableau documents sont obligatoires.'
  }),
  modalites: EXPLOITATION_FIELDS.modalites.required().messages({
    'array.base': 'Les modalités doivent être dans un tableau.',
    'any.required': 'Le tableau modalités est obligatoire.'
  })
})

export const exploitationSchemaEdition = Joi.object().keys({
  date_debut: EXPLOITATION_FIELDS.date_debut,
  date_fin: EXPLOITATION_FIELDS.date_fin.allow(null),
  statut: EXPLOITATION_FIELDS.statut,
  raison_abandon: addStringMessages(EXPLOITATION_FIELDS.raison_abandon.allow(null), 'raison_abandon'),
  remarque: addStringMessages(EXPLOITATION_FIELDS.remarque.allow(null), 'remarque'),
  point: EXPLOITATION_FIELDS.point,
  preleveur: EXPLOITATION_FIELDS.preleveur,
  usages: EXPLOITATION_FIELDS.usages,
  regles: EXPLOITATION_FIELDS.regles,
  documents: EXPLOITATION_FIELDS.documents,
  modalites: EXPLOITATION_FIELDS.modalites
})

export function validateCreation(exploitation) {
  return validatePayload(exploitation, exploitationSchemaCreation)
}

export function validateChanges(changes) {
  return validatePayload(changes, exploitationSchemaEdition)
}
