import mongo, {ObjectId} from '../util/mongo.js'
import createHttpError from 'http-errors'
import {getNextSeqId} from '../util/sequences.js'

export async function getExploitationsFromPointId(pointId) {
  return mongo.db.collection('exploitations').find(
    {
      point: pointId,
      deletedAt: {$exists: false}
    }
  ).toArray()
}

export async function getExploitation(exploitationId) {
  return mongo.db.collection('exploitations').findOne(
    {
      _id: exploitationId,
      deletedAt: {$exists: false}
    }
  )
}

export async function getExploitationBySeqId(codeTerritoire, idExploitation) {
  return mongo.db.collection('exploitations').findOne(
    {id_exploitation: idExploitation, territoire: codeTerritoire}
  )
}

export async function pointHasActiveExploitation(pointId) {
  const count = await mongo.db.collection('exploitations').countDocuments({
    point: pointId,
    statut: 'En activité',
    deletedAt: {$exists: false}
  })

  return count > 0
}

/* Insertion (utilisé par le service) */

export async function insertExploitation(exploitation, codeTerritoire) {
  const nextId = await getNextSeqId(`territoire-${codeTerritoire}-exploitations`)

  exploitation._id = new ObjectId()
  exploitation.id_exploitation = nextId
  exploitation.territoire = codeTerritoire
  exploitation.createdAt = new Date()
  exploitation.updatedAt = new Date()

  await mongo.db.collection('exploitations').insertOne(exploitation)

  return exploitation
}

/* Mise à jour par ID (utilisé par le service) */

export async function updateExploitationById(exploitationId, changes) {
  if (!changes || typeof changes !== 'object') {
    throw createHttpError(400, 'Les modifications doivent être un objet.')
  }

  const update = {
    ...changes,
    updatedAt: new Date()
  }

  const exploitation = await mongo.db.collection('exploitations').findOneAndUpdate(
    {_id: exploitationId, deletedAt: {$exists: false}},
    {$set: update},
    {returnDocument: 'after'}
  )

  if (!exploitation) {
    throw createHttpError(404, 'Cette exploitation est introuvable.')
  }

  return exploitation
}

/* Requêtes liées aux préleveurs */

export async function preleveurHasExploitations(preleveurId) {
  const count = await mongo.db.collection('exploitations').countDocuments({
    preleveur: preleveurId,
    deletedAt: {$exists: false}
  })

  return count > 0
}

export async function getPreleveurExploitations(preleveurId, projection) {
  return mongo.db.collection('exploitations').find(
    {preleveur: preleveurId, deletedAt: {$exists: false}},
    {projection}
  ).toArray()
}

export async function deleteExploitation(exploitationId) {
  return mongo.db.collection('exploitations').findOneAndUpdate(
    {_id: exploitationId, deletedAt: {$exists: false}},
    {$set: {
      deletedAt: new Date(),
      updatedAt: new Date()
    }},
    {returnDocument: 'after'}
  )
}

export async function bulkInsertExploitations(codeTerritoire, exploitations) {
  if (exploitations.length === 0) {
    return {insertedCount: 0}
  }

  const exploitationsToInsert = exploitations.map(exploitation => ({
    ...exploitation,
    territoire: codeTerritoire,
    createdAt: new Date(),
    updatedAt: new Date()
  }))

  const {insertedCount} = await mongo.db.collection('exploitations').insertMany(exploitationsToInsert)

  return {insertedCount}
}

export async function bulkDeleteExploitations(codeTerritoire) {
  await mongo.db.collection('exploitations').deleteMany({territoire: codeTerritoire})
}
